// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  STUDENT
  TUTOR
  EMPLOYER
  ADMIN
}

enum DifficultyLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  role      UserRole @default(STUDENT)
  avatar    String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  createdCourses Course[]     @relation("CourseInstructor")
  enrollments    Enrollment[]
  reviews        Review[]
  comments       Comment[]
  bookings       Booking[]

  @@map("users")
}

model Course {
  id                String          @id @default(uuid())
  title             String
  description       String
  category          String
  contentUrl        String?         @map("content_url")
  instructorName    String          @map("instructor_name")
  duration          String
  difficultyLevel   DifficultyLevel @map("difficulty_level")
  tags              String[]
  thumbnailUrl      String?         @map("thumbnail_url")
  price             Float           @default(0)
  enrollmentCount   Int             @default(0) @map("enrollment_count")
  averageRating     Float           @default(0) @map("average_rating")
  totalRatings      Int             @default(0) @map("total_ratings")
  isPublished       Boolean         @default(true) @map("is_published")
  createdBy         String          @map("created_by")
  createdAt         DateTime        @default(now()) @map("created_at")
  updatedAt         DateTime        @updatedAt @map("updated_at")

  // Relations
  instructor  User         @relation("CourseInstructor", fields: [createdBy], references: [id])
  enrollments Enrollment[]
  reviews     Review[]
  comments    Comment[]
  modules     Module[]

  @@map("courses")
}

model Enrollment {
  id           String    @id @default(uuid())
  courseId     String    @map("course_id")
  userId       String    @map("user_id")
  progress     Int       @default(0)
  enrolledAt   DateTime  @default(now()) @map("enrolled_at")
  completedAt  DateTime? @map("completed_at")
  lastAccessed DateTime? @map("last_accessed")

  // Relations
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([courseId, userId])
  @@map("enrollments")
}

model Review {
  id        String   @id @default(uuid())
  courseId  String   @map("course_id")
  userId    String   @map("user_id")
  userName  String   @map("user_name")
  rating    Int
  review    String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([courseId, userId])
  @@map("reviews")
}

model Comment {
  id        String    @id @default(uuid())
  courseId  String    @map("course_id")
  userId    String    @map("user_id")
  userName  String    @map("user_name")
  userAvatar String?  @map("user_avatar")
  content   String
  parentId  String?   @map("parent_id")
  likes     Int       @default(0)
  isEdited  Boolean   @default(false) @map("is_edited")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")

  // Relations
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  parent Comment? @relation("CommentReplies", fields: [parentId], references: [id])
  replies Comment[] @relation("CommentReplies")

  @@map("comments")
}

model Module {
  id            String  @id @default(uuid())
  courseId      String  @map("course_id")
  title         String
  description   String
  content       String
  videoUrl      String? @map("video_url")
  order         Int
  duration      String
  isFreePreview Boolean @default(false) @map("is_free_preview")

  // Relations
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@map("modules")
}

model Booking {
  id          String   @id @default(uuid())
  userId      String   @map("user_id")
  tutorName   String   @map("tutor_name")
  subject     String
  date        DateTime
  time        String
  duration    Int      // in minutes
  price       Float
  status      String   @default("pending")
  notes       String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("bookings")
}
